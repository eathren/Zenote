rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId, graphId) {
      return exists(/databases/$(database)/documents/memberships/$(graphId)) &&
             get(/databases/$(database)/documents/memberships/$(graphId)).data.userId == userId &&
             get(/databases/$(database)/documents/memberships/$(graphId)).data.permission == 'owner';
    }

    function canWrite(userId, graphId) {
      return exists(/databases/$(database)/documents/memberships/$(graphId)) &&
             get(/databases/$(database)/documents/memberships/$(graphId)).data.userId == userId &&
             (get(/databases/$(database)/documents/memberships/$(graphId)).data.permission == 'write' ||
              get(/databases/$(database)/documents/memberships/$(graphId)).data.permission == 'owner');
    }

    function canRead(userId, graphId) {
      return exists(/databases/$(database)/documents/memberships/$(graphId)) &&
             get(/databases/$(database)/documents/memberships/$(graphId)).data.userId == userId &&
             (get(/databases/$(database)/documents/memberships/$(graphId)).data.permission == 'read' ||
              get(/databases/$(database)/documents/memberships/$(graphId)).data.permission == 'write' ||
              get(/databases/$(database)/documents/memberships/$(graphId)).data.permission == 'owner');
    }

    function canUpdate(userId, graphId) {
      return exists(/databases/$(database)/documents/memberships/$(graphId)) &&
             get(/databases/$(database)/documents/memberships/$(graphId)).data.userId == userId &&
             (get(/databases/$(database)/documents/memberships/$(graphId)).data.permission != 'read');
    }

    // Rules for memberships
    match /memberships/{membershipId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update, delete: if canWrite(request.auth.uid, membershipId) || isOwner(request.auth.uid, membershipId);
    }

    // Rules for graphs
    match /graphs/{graphId} {
      allow read: if canRead(request.auth.uid, graphId);
      allow create: if request.auth.uid != null;
      allow update, delete: if canUpdate(request.auth.uid, graphId) || isOwner(request.auth.uid, graphId);
    }

        // Rules for nodes
    match /graphs/{graphId}/nodes/{nodeId} {
      allow read: if canRead(request.auth.uid, graphId);
      allow create: if request.auth.uid != null;
      allow update, delete: if canUpdate(request.auth.uid, graphId) || isOwner(request.auth.uid, graphId);
    }

    // Rules for users
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, write: if request.auth != null && request.auth.uid == userId;
    } 

    match /{document=**} {
      allow read, write: if true;
    } 
  }
}
